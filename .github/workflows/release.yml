name: Publish Packages

on:
  # For develop branch
  push:
    branches:
      - develop
  # For master branch
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write

    # Skip if it's a PR to master that's not merged
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org/'

      - name: Git config
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: "Create .npmrc"
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${GH_TOKEN}" >> .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Install dependencies
        run: bun install

      - name: Get commit messages
        id: get_commits
        if: github.event_name == 'pull_request'
        run: |
          COMMITS=$(git log --format="%s" $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD)
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Determine version
        id: version
        run: |
          BRANCH="${{ github.event_name == 'pull_request' && 'master' || github.ref_name }}"
          
          # Get the latest version from npm for all packages
          LATEST_VERSIONS=()
          for pkg in packages/*; do
            if [ -f "$pkg/package.json" ]; then
              PKG_NAME=$(node -p "require('./$pkg/package.json').name")
              LATEST_VERSION=$(npm view $PKG_NAME version 2>/dev/null || echo "0.0.0")
              LATEST_VERSIONS+=($LATEST_VERSION)
            fi
          done
          
          # Find the highest version
          LATEST_VERSION=$(printf '%s\n' "${LATEST_VERSIONS[@]}" | sort -V | tail -n1)

          if [ "$BRANCH" = "master" ]; then
            # For master branch: first check if current version is canary
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            
            # If it's a canary version, remove the suffix first
            if [[ "$CURRENT_VERSION" == *"-canary"* ]]; then
              BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/-canary\.[0-9]*$//')
              LATEST_VERSION=$BASE_VERSION
            fi

            # Then do semantic versioning based on commit messages
            COMMITS="${{ steps.get_commits.outputs.commits }}"
            
            if echo "$COMMITS" | grep -q "^feat!:\|^BREAKING CHANGE"; then
              # Major version for breaking changes
              NEW_VERSION=$(echo $LATEST_VERSION | awk -F. '{$1++; $2=0; $3=0; print $1"."$2"."$3}' OFS=.)
            elif echo "$COMMITS" | grep -q "^feat:"; then
              # Minor version for features
              NEW_VERSION=$(echo $LATEST_VERSION | awk -F. '{$2++; $3=0; print $1"."$2"."$3}' OFS=.)
            else
              # Patch version for fixes
              NEW_VERSION=$(echo $LATEST_VERSION | awk -F. '{$3++; print $1"."$2"."$3}' OFS=.)
            fi
          else
            # For develop branch: get max canary version
            VERSIONS_JSON=$(npm view $PKG_NAME versions --json 2>/dev/null || echo "[]")
            
            # Extract the base version (without canary suffix) and find the highest one
            BASE_VERSION=$(echo "$VERSIONS_JSON" | node -e "
              const versions = JSON.parse(process.argv[1]);
              const baseVersions = versions
                .filter(v => !v.includes('canary'))
                .sort((a, b) => {
                  const [aMajor, aMinor, aPatch] = a.split('.').map(Number);
                  const [bMajor, bMinor, bPatch] = b.split('.').map(Number);
                  if (aMajor !== bMajor) return aMajor - bMajor;
                  if (aMinor !== bMinor) return aMinor - bMinor;
                  return aPatch - bPatch;
                });
              console.log(baseVersions[baseVersions.length - 1]);
            " "$VERSIONS_JSON")
            
            # Get the highest canary number for the base version
            CURRENT_CANARY_MAX=$(echo "$VERSIONS_JSON" | node -e "
              const versions = JSON.parse(process.argv[1]);
              const baseVersion = process.argv[2];
              const canaryVersions = versions
                .filter(v => v.startsWith('${BASE_VERSION}-canary.'))
                .map(v => parseInt(v.split('.').pop()))
                .filter(n => !isNaN(n));
              console.log(Math.max(...canaryVersions, 0));
            " "$VERSIONS_JSON" "$BASE_VERSION")
            
            NEW_VERSION="${BASE_VERSION}-canary.$((CURRENT_CANARY_MAX + 1))"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update versions
        run: |
          NEW_VERSION=${{ steps.version.outputs.new_version }}
          
          # Update root package.json
          if [ -f "package.json" ]; then
            sed -i "s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" package.json
          fi
          
          # Update all package versions in packages directory
          for pkg in packages/*; do
            if [ -f "$pkg/package.json" ]; then
              sed -i "s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" $pkg/package.json
              
              # Update internal dependencies versions
              PKG_NAME=$(node -p "require('./$pkg/package.json').name")
              for dep_pkg in packages/*; do
                if [ -f "$dep_pkg/package.json" ]; then
                  # Update dependencies and peerDependencies
                  sed -i "s/\"$PKG_NAME\": \".*\"/\"$PKG_NAME\": \"$NEW_VERSION\"/" $dep_pkg/package.json
                fi
              done
            fi
          done

      - name: Push develop version
        if: github.event_name == 'push'
        run: |
          NEW_VERSION=${{ steps.version.outputs.new_version }}
          git add package.json packages/*/package.json
          git commit -m "chore: update version to ${NEW_VERSION} [skip ci]"
          git push origin develop

      - name: Push master version
        if: github.event_name == 'pull_request'
        run: |
          NEW_VERSION=${{ steps.version.outputs.new_version }}
          git add package.json packages/*/package.json
          git commit -m "chore: update version to ${NEW_VERSION} [skip ci]"
          git push origin master

      - name: Build packages
        run: |
          for pkg in packages/*; do
            if [ -f "$pkg/package.json" ]; then
              cd $pkg
              bun run build
              cd ../..
            fi
          done

      - name: Publish to NPM
        run: |
          for pkg in packages/*; do
            if [ -f "$pkg/package.json" ]; then
              cd $pkg
              if [ "${{ github.event_name }}" = "push" ]; then
                npm publish --tag canary
              else
                npm publish
              fi
              cd ../..
            fi
          done

      - name: Create Release
        if: github.event_name == 'pull_request'
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          generateReleaseNotes: true
          token: ${{ secrets.GH_TOKEN }}